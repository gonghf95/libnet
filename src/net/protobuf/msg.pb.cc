// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* AccountCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountCheckRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountCheckRs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountCheckRs_ReturnCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountCheckToHttpRs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountCheckToHttpRs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotSyncState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotSyncState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotTestEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotTestEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  AccountCheck_descriptor_ = file->message_type(0);
  static const int AccountCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheck, password_),
  };
  AccountCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountCheck_descriptor_,
      AccountCheck::default_instance_,
      AccountCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountCheck));
  AccountCheckRs_descriptor_ = file->message_type(1);
  static const int AccountCheckRs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckRs, return_code_),
  };
  AccountCheckRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountCheckRs_descriptor_,
      AccountCheckRs::default_instance_,
      AccountCheckRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountCheckRs));
  AccountCheckRs_ReturnCode_descriptor_ = AccountCheckRs_descriptor_->enum_type(0);
  AccountCheckToHttpRs_descriptor_ = file->message_type(2);
  static const int AccountCheckToHttpRs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckToHttpRs, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckToHttpRs, account_),
  };
  AccountCheckToHttpRs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountCheckToHttpRs_descriptor_,
      AccountCheckToHttpRs::default_instance_,
      AccountCheckToHttpRs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckToHttpRs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCheckToHttpRs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountCheckToHttpRs));
  RobotState_descriptor_ = file->message_type(3);
  static const int RobotState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, state_),
  };
  RobotState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotState_descriptor_,
      RobotState::default_instance_,
      RobotState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotState));
  RobotSyncState_descriptor_ = file->message_type(4);
  static const int RobotSyncState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotSyncState, states_),
  };
  RobotSyncState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotSyncState_descriptor_,
      RobotSyncState::default_instance_,
      RobotSyncState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotSyncState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotSyncState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotSyncState));
  RobotTestEnd_descriptor_ = file->message_type(5);
  static const int RobotTestEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotTestEnd, state_),
  };
  RobotTestEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotTestEnd_descriptor_,
      RobotTestEnd::default_instance_,
      RobotTestEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotTestEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotTestEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotTestEnd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountCheck_descriptor_, &AccountCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountCheckRs_descriptor_, &AccountCheckRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountCheckToHttpRs_descriptor_, &AccountCheckToHttpRs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotState_descriptor_, &RobotState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotSyncState_descriptor_, &RobotSyncState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotTestEnd_descriptor_, &RobotTestEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete AccountCheck::default_instance_;
  delete AccountCheck_reflection_;
  delete AccountCheckRs::default_instance_;
  delete AccountCheckRs_reflection_;
  delete AccountCheckToHttpRs::default_instance_;
  delete AccountCheckToHttpRs_reflection_;
  delete RobotState::default_instance_;
  delete RobotState_reflection_;
  delete RobotSyncState::default_instance_;
  delete RobotSyncState_reflection_;
  delete RobotTestEnd::default_instance_;
  delete RobotTestEnd_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\005Proto\"1\n\014AccountCheck\022\017\n\007ac"
    "count\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\245\001\n\016Accoun"
    "tCheckRs\022\023\n\013return_code\030\001 \002(\005\"~\n\nReturnC"
    "ode\022\n\n\006ARC_OK\020\000\022\017\n\013ARC_UNKONWN\020\001\022\031\n\025ARC_"
    "NOT_FOUND_ACCOUNT\020\002\022\026\n\022ARC_PASSWORD_WRON"
    "G\020\003\022\017\n\013ARC_LOGGING\020\004\022\017\n\013ARC_TIMEOUT\020\005\"<\n"
    "\024AccountCheckToHttpRs\022\023\n\013return_code\030\001 \002"
    "(\005\022\017\n\007account\030\002 \002(\t\",\n\nRobotState\022\017\n\007acc"
    "ount\030\001 \002(\t\022\r\n\005state\030\002 \002(\005\"3\n\016RobotSyncSt"
    "ate\022!\n\006states\030\001 \003(\0132\021.Proto.RobotState\"\035"
    "\n\014RobotTestEnd\022\r\n\005state\030\001 \002(\005", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  AccountCheck::default_instance_ = new AccountCheck();
  AccountCheckRs::default_instance_ = new AccountCheckRs();
  AccountCheckToHttpRs::default_instance_ = new AccountCheckToHttpRs();
  RobotState::default_instance_ = new RobotState();
  RobotSyncState::default_instance_ = new RobotSyncState();
  RobotTestEnd::default_instance_ = new RobotTestEnd();
  AccountCheck::default_instance_->InitAsDefaultInstance();
  AccountCheckRs::default_instance_->InitAsDefaultInstance();
  AccountCheckToHttpRs::default_instance_->InitAsDefaultInstance();
  RobotState::default_instance_->InitAsDefaultInstance();
  RobotSyncState::default_instance_->InitAsDefaultInstance();
  RobotTestEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountCheck::kAccountFieldNumber;
const int AccountCheck::kPasswordFieldNumber;
#endif  // !_MSC_VER

AccountCheck::AccountCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AccountCheck)
}

void AccountCheck::InitAsDefaultInstance() {
}

AccountCheck::AccountCheck(const AccountCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.AccountCheck)
}

void AccountCheck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountCheck::~AccountCheck() {
  // @@protoc_insertion_point(destructor:Proto.AccountCheck)
  SharedDtor();
}

void AccountCheck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void AccountCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountCheck_descriptor_;
}

const AccountCheck& AccountCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

AccountCheck* AccountCheck::default_instance_ = NULL;

AccountCheck* AccountCheck::New() const {
  return new AccountCheck;
}

void AccountCheck::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AccountCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AccountCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AccountCheck)
  return false;
#undef DO_
}

void AccountCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AccountCheck)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AccountCheck)
}

::google::protobuf::uint8* AccountCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AccountCheck)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AccountCheck)
  return target;
}

int AccountCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountCheck::MergeFrom(const AccountCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCheck::CopyFrom(const AccountCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountCheck::Swap(AccountCheck* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountCheck_descriptor_;
  metadata.reflection = AccountCheck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AccountCheckRs_ReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountCheckRs_ReturnCode_descriptor_;
}
bool AccountCheckRs_ReturnCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_OK;
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_UNKONWN;
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_NOT_FOUND_ACCOUNT;
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_PASSWORD_WRONG;
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_LOGGING;
const AccountCheckRs_ReturnCode AccountCheckRs::ARC_TIMEOUT;
const AccountCheckRs_ReturnCode AccountCheckRs::ReturnCode_MIN;
const AccountCheckRs_ReturnCode AccountCheckRs::ReturnCode_MAX;
const int AccountCheckRs::ReturnCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AccountCheckRs::kReturnCodeFieldNumber;
#endif  // !_MSC_VER

AccountCheckRs::AccountCheckRs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AccountCheckRs)
}

void AccountCheckRs::InitAsDefaultInstance() {
}

AccountCheckRs::AccountCheckRs(const AccountCheckRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.AccountCheckRs)
}

void AccountCheckRs::SharedCtor() {
  _cached_size_ = 0;
  return_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountCheckRs::~AccountCheckRs() {
  // @@protoc_insertion_point(destructor:Proto.AccountCheckRs)
  SharedDtor();
}

void AccountCheckRs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountCheckRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountCheckRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountCheckRs_descriptor_;
}

const AccountCheckRs& AccountCheckRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

AccountCheckRs* AccountCheckRs::default_instance_ = NULL;

AccountCheckRs* AccountCheckRs::New() const {
  return new AccountCheckRs;
}

void AccountCheckRs::Clear() {
  return_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountCheckRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AccountCheckRs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 return_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
          set_has_return_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AccountCheckRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AccountCheckRs)
  return false;
#undef DO_
}

void AccountCheckRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AccountCheckRs)
  // required int32 return_code = 1;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AccountCheckRs)
}

::google::protobuf::uint8* AccountCheckRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AccountCheckRs)
  // required int32 return_code = 1;
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AccountCheckRs)
  return target;
}

int AccountCheckRs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 return_code = 1;
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountCheckRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountCheckRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountCheckRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountCheckRs::MergeFrom(const AccountCheckRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountCheckRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCheckRs::CopyFrom(const AccountCheckRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCheckRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountCheckRs::Swap(AccountCheckRs* other) {
  if (other != this) {
    std::swap(return_code_, other->return_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountCheckRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountCheckRs_descriptor_;
  metadata.reflection = AccountCheckRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountCheckToHttpRs::kReturnCodeFieldNumber;
const int AccountCheckToHttpRs::kAccountFieldNumber;
#endif  // !_MSC_VER

AccountCheckToHttpRs::AccountCheckToHttpRs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AccountCheckToHttpRs)
}

void AccountCheckToHttpRs::InitAsDefaultInstance() {
}

AccountCheckToHttpRs::AccountCheckToHttpRs(const AccountCheckToHttpRs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.AccountCheckToHttpRs)
}

void AccountCheckToHttpRs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  return_code_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountCheckToHttpRs::~AccountCheckToHttpRs() {
  // @@protoc_insertion_point(destructor:Proto.AccountCheckToHttpRs)
  SharedDtor();
}

void AccountCheckToHttpRs::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void AccountCheckToHttpRs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountCheckToHttpRs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountCheckToHttpRs_descriptor_;
}

const AccountCheckToHttpRs& AccountCheckToHttpRs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

AccountCheckToHttpRs* AccountCheckToHttpRs::default_instance_ = NULL;

AccountCheckToHttpRs* AccountCheckToHttpRs::New() const {
  return new AccountCheckToHttpRs;
}

void AccountCheckToHttpRs::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    return_code_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountCheckToHttpRs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AccountCheckToHttpRs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 return_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
          set_has_return_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AccountCheckToHttpRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AccountCheckToHttpRs)
  return false;
#undef DO_
}

void AccountCheckToHttpRs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AccountCheckToHttpRs)
  // required int32 return_code = 1;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_code(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AccountCheckToHttpRs)
}

::google::protobuf::uint8* AccountCheckToHttpRs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AccountCheckToHttpRs)
  // required int32 return_code = 1;
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_code(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AccountCheckToHttpRs)
  return target;
}

int AccountCheckToHttpRs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 return_code = 1;
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_code());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountCheckToHttpRs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountCheckToHttpRs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountCheckToHttpRs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountCheckToHttpRs::MergeFrom(const AccountCheckToHttpRs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountCheckToHttpRs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCheckToHttpRs::CopyFrom(const AccountCheckToHttpRs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCheckToHttpRs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountCheckToHttpRs::Swap(AccountCheckToHttpRs* other) {
  if (other != this) {
    std::swap(return_code_, other->return_code_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountCheckToHttpRs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountCheckToHttpRs_descriptor_;
  metadata.reflection = AccountCheckToHttpRs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotState::kAccountFieldNumber;
const int RobotState::kStateFieldNumber;
#endif  // !_MSC_VER

RobotState::RobotState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotState)
}

void RobotState::InitAsDefaultInstance() {
}

RobotState::RobotState(const RobotState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.RobotState)
}

void RobotState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:Proto.RobotState)
  SharedDtor();
}

void RobotState::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void RobotState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotState_descriptor_;
}

const RobotState& RobotState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RobotState* RobotState::default_instance_ = NULL;

RobotState* RobotState::New() const {
  return new RobotState;
}

void RobotState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotState)
  return false;
#undef DO_
}

void RobotState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotState)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotState)
}

::google::protobuf::uint8* RobotState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotState)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotState)
  return target;
}

int RobotState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotState::MergeFrom(const RobotState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotState::CopyFrom(const RobotState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RobotState::Swap(RobotState* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotState_descriptor_;
  metadata.reflection = RobotState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotSyncState::kStatesFieldNumber;
#endif  // !_MSC_VER

RobotSyncState::RobotSyncState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotSyncState)
}

void RobotSyncState::InitAsDefaultInstance() {
}

RobotSyncState::RobotSyncState(const RobotSyncState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.RobotSyncState)
}

void RobotSyncState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotSyncState::~RobotSyncState() {
  // @@protoc_insertion_point(destructor:Proto.RobotSyncState)
  SharedDtor();
}

void RobotSyncState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotSyncState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotSyncState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotSyncState_descriptor_;
}

const RobotSyncState& RobotSyncState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RobotSyncState* RobotSyncState::default_instance_ = NULL;

RobotSyncState* RobotSyncState::New() const {
  return new RobotSyncState;
}

void RobotSyncState::Clear() {
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotSyncState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotSyncState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.RobotState states = 1;
      case 1: {
        if (tag == 10) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_states;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotSyncState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotSyncState)
  return false;
#undef DO_
}

void RobotSyncState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotSyncState)
  // repeated .Proto.RobotState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotSyncState)
}

::google::protobuf::uint8* RobotSyncState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotSyncState)
  // repeated .Proto.RobotState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotSyncState)
  return target;
}

int RobotSyncState::ByteSize() const {
  int total_size = 0;

  // repeated .Proto.RobotState states = 1;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotSyncState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotSyncState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotSyncState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotSyncState::MergeFrom(const RobotSyncState& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotSyncState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotSyncState::CopyFrom(const RobotSyncState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotSyncState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->states())) return false;
  return true;
}

void RobotSyncState::Swap(RobotSyncState* other) {
  if (other != this) {
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotSyncState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotSyncState_descriptor_;
  metadata.reflection = RobotSyncState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotTestEnd::kStateFieldNumber;
#endif  // !_MSC_VER

RobotTestEnd::RobotTestEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotTestEnd)
}

void RobotTestEnd::InitAsDefaultInstance() {
}

RobotTestEnd::RobotTestEnd(const RobotTestEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.RobotTestEnd)
}

void RobotTestEnd::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotTestEnd::~RobotTestEnd() {
  // @@protoc_insertion_point(destructor:Proto.RobotTestEnd)
  SharedDtor();
}

void RobotTestEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotTestEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotTestEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotTestEnd_descriptor_;
}

const RobotTestEnd& RobotTestEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RobotTestEnd* RobotTestEnd::default_instance_ = NULL;

RobotTestEnd* RobotTestEnd::New() const {
  return new RobotTestEnd;
}

void RobotTestEnd::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotTestEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotTestEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotTestEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotTestEnd)
  return false;
#undef DO_
}

void RobotTestEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotTestEnd)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotTestEnd)
}

::google::protobuf::uint8* RobotTestEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotTestEnd)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotTestEnd)
  return target;
}

int RobotTestEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotTestEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotTestEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotTestEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotTestEnd::MergeFrom(const RobotTestEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotTestEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotTestEnd::CopyFrom(const RobotTestEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotTestEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RobotTestEnd::Swap(RobotTestEnd* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotTestEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotTestEnd_descriptor_;
  metadata.reflection = RobotTestEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
